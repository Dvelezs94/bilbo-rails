$(document).on('turbolinks:load', function() {
  if ($("#bilbomap").length > 0){
    var infowindow = null;
    google.maps.event.addDomListener(window, 'turbolinks:load', initializeMap);

    // just in case map doesn't load initially, retry until it does
    var map_load_interval = setInterval(function(){
      //console.log("attempting to load map");
      if (typeof google === 'object' && typeof google.maps === 'object') {
        //console.log("map has loaded so im not retrying anymore");
        clearInterval(map_load_interval);
      } else {
        initializeMap();
      }
    }, 1500)
  }
});

function close_infowindow(){
  if (infowindow) {
     infowindow.close();
   }
}

// Locate map on user geolocation
function getUsetLocation() {
  if (navigator.geolocation) {
    navigator.geolocation.getCurrentPosition(
      (position) => {
        const pos = {
          lat: position.coords.latitude,
          lng: position.coords.longitude,
        };
        infowindow.setPosition(pos);
        infowindow.open(window.bilbomap);
        window.bilbomap.setCenter(pos);
      },
      () => {
        handleLocationError(true, infowindow, window.bilbomap.getCenter());
      }
    );
  } else {
    // Browser doesn't support Geolocation
    handleLocationError(false, infowindow, window.bilbomap.getCenter());
  }
}

function handleLocationError(browserHasGeolocation, infowindow, pos) {
  infowindow.setPosition(pos);
  infowindow.setContent(
    browserHasGeolocation
      ? "Error: The Geolocation service failed."
      : "Error: Your browser doesn't support geolocation."
  );
  infowindow.open(map);
}

function initializeMap() {
  waitForElement("#bilbomap", function() {
    var bilbos = JSON.parse($("#bilboMarkers").val())

    // center of mexico
    var center = new google.maps.LatLng( parseFloat($("#mapLat").val()) || parseFloat($.getUrlVar("lat")) || 19.4324451, parseFloat($("#mapLng").val()) || parseFloat($.getUrlVar("lng")) || -99.1333817);
    var zoom = parseInt($("#mapZoom").val()) || parseInt($.getUrlVar("zoom")) || 12

    window.bilbomap = new google.maps.Map(document.getElementById('bilbomap'), {
      zoom: zoom,
      center: center,
      minZoom: 11,
      mapTypeId: google.maps.MapTypeId.ROADMAP,
      styles: [{"featureType":"all","elementType":"labels.text.fill","stylers":[{"color":"#7c93a3"},{"lightness":"-10"}]},{"featureType":"administrative.country","elementType":"geometry","stylers":[{"visibility":"on"}]},{"featureType":"administrative.country","elementType":"geometry.stroke","stylers":[{"color":"#a0a4a5"}]},{"featureType":"administrative.province","elementType":"geometry.stroke","stylers":[{"color":"#62838e"}]},{"featureType":"landscape","elementType":"geometry.fill","stylers":[{"color":"#dde3e3"}]},{"featureType":"landscape.man_made","elementType":"geometry.stroke","stylers":[{"color":"#3f4a51"},{"weight":"0.30"}]},{"featureType":"poi","elementType":"all","stylers":[{"visibility":"simplified"}]},{"featureType":"poi.attraction","elementType":"all","stylers":[{"visibility":"on"}]},{"featureType":"poi.business","elementType":"all","stylers":[{"visibility":"off"}]},{"featureType":"poi.government","elementType":"all","stylers":[{"visibility":"off"}]},{"featureType":"poi.park","elementType":"all","stylers":[{"visibility":"on"}]},{"featureType":"poi.place_of_worship","elementType":"all","stylers":[{"visibility":"off"}]},{"featureType":"poi.school","elementType":"all","stylers":[{"visibility":"off"}]},{"featureType":"poi.sports_complex","elementType":"all","stylers":[{"visibility":"off"}]},{"featureType":"road","elementType":"all","stylers":[{"saturation":"-100"},{"visibility":"on"}]},{"featureType":"road","elementType":"geometry.stroke","stylers":[{"visibility":"on"}]},{"featureType":"road.highway","elementType":"geometry.fill","stylers":[{"color":"#bbcacf"}]},{"featureType":"road.highway","elementType":"geometry.stroke","stylers":[{"lightness":"0"},{"color":"#bbcacf"},{"weight":"0.50"}]},{"featureType":"road.highway","elementType":"labels","stylers":[{"visibility":"on"}]},{"featureType":"road.highway","elementType":"labels.text","stylers":[{"visibility":"on"}]},{"featureType":"road.highway.controlled_access","elementType":"geometry.fill","stylers":[{"color":"#ffffff"}]},{"featureType":"road.highway.controlled_access","elementType":"geometry.stroke","stylers":[{"color":"#a9b4b8"}]},{"featureType":"road.arterial","elementType":"labels.icon","stylers":[{"invert_lightness":true},{"saturation":"-7"},{"lightness":"3"},{"gamma":"1.80"},{"weight":"0.01"}]},{"featureType":"transit.line","elementType":"all","stylers":[{"visibility":"off"}]},{"featureType":"water","elementType":"geometry.fill","stylers":[{"color":"#a3c7df"}]},{ "featureType": "road.arterial", "elementType": "labels", "stylers": [ { "visibility": "off" } ] }],
      disableDefaultUI: true,
      zoomControl: true,
    });

    infowindow = new google.maps.InfoWindow();

    getUsetLocation();

    build_markers(bilbos);
    // build_circles(bilbos);
  });
}

// function build_circles(bilbos) {
//   for (const pinpoint in bilbos) {
//     if (bilbos[pinpoint]["category"] == "pinmarker") {
//       // Add the cicrircle for this city to the map.
//       const branchCircle = new google.maps.Circle({
//       strokeColor: "#7CA0C0",
//       strokeOpacity: 0.8,
//       strokeWeight: 2,
//       fillColor: "#7CA0C0",
//       fillOpacity: 0.35,
//       map: window.bilbomap,
//       center: { lat: bilbos[pinpoint]["lat"], lng: bilbos[pinpoint]["lng"] },
//       radius: 2000,
//     });
//     }
//   }
// }

function build_markers(bilbos) {
  // current max zindex for markers
  var markersCurrentZIndex = 100
  var previousMarker
  var markersNotSmart = []

  // build markers from the available bilbos
  window.markers = bilbos.filter(function(bilbo) {
      if ( bilbo["category"] == "pinmarker" ) {
        return false; // skip pin markers because we want them to be circles
      }
      return true;
    }).map(function(bilbo) {
      var marker = new MarkerWithLabel({
        position: { lat: bilbo["lat"], lng: bilbo["lng"] },
        icon: " ",
        labelContent: "<i class='icon-" + bilbo["category"] + " tx-16'></i>" + " $" + bilbo["cycle_price"].toFixed(2).toString(),
        labelAnchor: new google.maps.Point(-10, 0),
        labelClass: "mklabel pd-x-5 " + (bilbo["smart"] == true ? "mklabel_smart" : ""),
        zIndex: markersCurrentZIndex,
        map: window.bilbomap,
        clicked: false,
        visited: false,
        smart: bilbo["smart"]
    });

    // close infowindow if clicked in another region of map
    google.maps.event.addListener(window.bilbomap, "click", function() {
      if (infowindow) {
         infowindow.close();
       }
       if (marker.clicked) {
        marker['clicked'] = false
        marker.setOptions({labelClass: 'mklabel ' + (marker["smart"] == true ? "mklabel_smart" : "")})
       }
    });

    // Icon in front on hover
    google.maps.event.addListener(marker, 'mouseover', function() {
      if (!marker.clicked) {
        markersCurrentZIndex = markersCurrentZIndex + 1;
        marker.setZIndex(markersCurrentZIndex);
        marker.setOptions({labelClass: 'mklabel mklabel_hover ' + (marker["smart"] == true ? "mklabel_smart" : "")})
      } else {
        markersCurrentZIndex = markersCurrentZIndex + 1;
        marker.setZIndex(markersCurrentZIndex);
      }
    });

    // Remove mklabel_selected class when mouse is out of marker
    google.maps.event.addListener(marker, 'mouseout', function() {
      if (!marker.clicked) {
        marker.setOptions({labelClass: 'mklabel ' + (marker["smart"] == true ? "mklabel_smart" : "")})
      }
    });


    // Fetch Board data and display in map
    google.maps.event.addListener(marker, 'click', function() {
      if (typeof previousMarker !== 'undefined' && previousMarker.clicked) {
        previousMarker['clicked'] = false
        previousMarker.setOptions({labelClass: 'mklabel ' + (previousMarker["smart"] == true ? "mklabel_smart" : "")})
       }
      if ($("#bilbomap").length && $("#boardInfo").length){
        $("#boardInfo").addClass("d-none");
        $("#map-layout").removeClass("col-xl-12");
        $("#map-layout").addClass("col-xl-9");
        $("#loading").addClass("placeholder-paragraph");
      }
      // alert('marker ' + marker.getPosition().lat() + ' clicked');
      $.ajax({
         url:  "/boards/get_info",
         dataType: "script",
         data: {lat: marker.getPosition().lat(), lng: marker.getPosition().lng(), selected_boards: $("#campaign_boards").val()},
         success: function(data) {
            if (infowindow) {
               infowindow.close();
             }
            infowindow.setContent(`
              <div class="card wd-220">
                <img src="${$("#boardTabContent").find('img:first').attr("src")}" class="card-img-top o-fit-cover ht-120">
                <div class="card-body pd-10-f">
                  <h5 class="card-title">${$("#board_info_name").text()}</h5>
                  <p class="card-text d-flex align-items-center justify-content-between tx-gray-500 tx-14 mg-b-5">
                  <span>
                  <i class="fe fe-eye"></i> ${$("#board_info_daily_views").text()}
                  </span>
                  <span>
                  <i class="fe fe-target"></i> ${$("#board_info_classification").text()}
                  </span>
                  <span>
                  <i class="fe fe-expand"></i> ${$("#board_info_diagonal_inches").text()}"
                  </span>
                  </p>
                  <div class="d-flex justify-content-between align-items-center">
                    <a href="/campaigns?openModal=modalNewCampaign" target="_parent" class="tx-14 ${ $("#dashboardWizard").length ? 'invisible': ''}" style="font-weight: 500">Crear una campa√±a <i class="fe fe-plus tx-semibold mg-l-10"></i></a>
                    <small class="tx-gray-500 tx-underline cursor-pointer" onclick="close_infowindow();">cerrar</a>
                  </div>
                </div>
              </div>`)
            infowindow.open(window.bilbomap, marker);
            // add active class to marker
            previousMarker = marker
            marker['clicked'] = true
            // mark marker as visited - we don't currently use this for anything but could be useful in the future
            marker['visited'] = true
            marker.setOptions({labelClass: 'mklabel ' + (marker["smart"] == true ? "mklabel_smart_selected" : "mklabel_selected")})

          if ($("#bilbomap").length && $("#boardInfo").length){
             $("#loading").removeClass("placeholder-paragraph");
             $("#boardInfo").removeClass("d-none");
           }
          },
         error: function() {
           alert("Oops! Occuri√≥ un error.");
         }
      });
    });

    return marker;
  });

  // markercluster custom icons
  var markerStyles = [
    {
      textColor: 'white',
      url: 'https://content-bilbo.app.bilbo.mx/statics/maps/markercluster/15-apr-2021/m1.svg',
      height: 53,
      width: 52
    },
    {
      textColor: 'white',
      url: 'https://content-bilbo.app.bilbo.mx/statics/maps/markercluster/15-apr-2021/m2.svg',
      height: 55,
      width: 54
    },
    {
      textColor: 'white',
      url: 'https://content-bilbo.app.bilbo.mx/statics/maps/markercluster/15-apr-2021/m3.svg',
      height: 57,
      width: 56
    },
    {
      textColor: 'white',
      url: 'https://content-bilbo.app.bilbo.mx/statics/maps/markercluster/15-apr-2021/m4.svg',
      height: 59,
      width: 58
    },
    {
      textColor: 'white',
      url: 'https://content-bilbo.app.bilbo.mx/statics/maps/markercluster/15-apr-2021/m5.svg',
      height: 61,
      width: 60
    },
  ]
  // Separate smart from no smart bilbos to use markercluster
  for (var mark in window.markers) {
    if (window.markers[mark]["smart"] == false){
      markersNotSmart.push(window.markers[mark]);
    } 
  }
  var options = {
    styles: markerStyles
  };
  window.markerCluster = new MarkerClusterer(window.bilbomap, markersNotSmart, options);
}


function DeleteMarkers() {
   window.markerCluster.clearMarkers();
   //Loop through all the markers and remove
   for (var i = 0; i < window.markers.length; i++) {
       window.markers[i].setMap(null);
   }
   window.markers = [];
}
